% R40
o1 (SURFACE RECTANGE - ORIGIN IS CENTER OR BOTTOM LEFT)
; CONFIG SECTION
; USE CENTER ORIGIN? 1=YES 0=NO
#<_center> = 1 
; USE METRIC UNITS? 1=YES 0=NO
#<_useMM> = 0  
; WIDTH ON X
#<_x_width> = 10.0    (9.25 INCHES = ~235MM)
; LENGTH ON Y
#<_y_length> = 10.0   (7.75 INCHES = ~197MM)
; TOOL DIAMETER
#<_tool_diameter> = 1  (1.375 INCHES = ~35MM)
; DEPTH TO GO DOWN IN ONE PASS USE NEGATIVE
o301 IF [#<_useMM> EQ 1]
    #<_pass_depth> = -0.05   (0.05MM PER PASS)
    #<_final_depth> = -0.05  (0.05MM FINAL DEPTH)
o301 ELSE
    #<_pass_depth> = -0.001  (0.002 INCHES PER PASS)
    #<_final_depth> = -0.01 (0.002 INCHES FINAL DEPTH)
o301 ENDIF
; STEPOVER PERCENTAGE 75-80% RECOMMENDED
#<_stepover_percent> = 50
; CALCULATE STEPOVER FROM TOOL DIAMETER AND PERCENTAGE
#<_stepover> = [#<_tool_diameter> * #<_stepover_percent> / 100]
; FEEDRATE
o302 IF [#<_useMM> EQ 1]
    #<_feedrate> = 12700  (500 INCHES/MIN = 12700 MM/MIN)
o302 ELSE
    #<_feedrate> = 500    (INCHES PER MINUTE)
o302 ENDIF

M0 (DEBUG, _useMM=#<_useMM> _center=#<_center> x_width=#<_x_width> y_length=#<_y_length> tool_diameter=#<_tool_diameter> pass_depth=#<_pass_depth> final_depth=#<_final_depth> stepover_percent=#<_stepover_percent> stepover=#<_stepover> feedrate=#<_feedrate>)
; END OF CONFIG SECTION

; SAFETY CHECKS
; 400-499
o400 IF [#<_final_depth> GT #<_pass_depth>]
    (m0 (msg, FINAL DEPTH MUST NOT BE HIGHER THAN PASS DEPTH - ABORTING)
    M2
o400 ENDIF 

; CHECK STEPOVER AGAINST TOOL DIAMETER
o401 IF [#<_stepover> GT [#<_tool_diameter> * 0.8]]
    (M0 (MSG, STEPOVER EXCEEDS 80% OF TOOL DIAMETER - ABORTING)
    M2
o401 ENDIF

; POSITION AND MOVEMENT CONTROL
; 200-299
o200 IF [#<_center> GT 0]
    #<_xpos> = [#<_x_width> / 2]   (ORIGIN IS CENTER SO SET X TO HALF WIDTH)
    #<_ypos> = [#<_y_length> / 2]  (ORIGIN IS CENTER SO SET Y TO HALF LENGTH)
o200 ELSE
    #<_xpos> = 0                   (START FROM BOTTOM LEFT)
    #<_ypos> = 0
o200 ENDIF

#<_curr_depth> = 0 (START AT Z0)
#<_depth> = #<_pass_depth> (START AT FIRST PASS DEPTH)
#<_ramp_feed> = [#<_feedrate> / 2]  (REDUCE FEEDRATE BY 50% FOR RAMP)

; SET ABSOLUTE POSITIONING AND XY PLANE
G0 G90 G17
o303 IF [#<_useMM> EQ 1]
    G21          (SET UNITS TO MILLIMETERS)
o303 ELSE
    G20          (SET UNITS TO INCHES)
o303 ENDIF

; MAIN PROGRAM FLOW CONTROL
; 100-199
o100 SUB
    ; SAFETY HEIGHT
    o101 IF [#<_useMM> EQ 1]
        G0 Z6.25                            
    o101 ELSE
        G0 Z.125                            
    o101 ENDIF
    ; RAMP START POSITION
    o102 IF [#<_center> EQ 1]
        (M0 (DEBUG, o102 _xpos=#<_xpos> _ypos=#<_ypos>)
        X[#<_xpos>] Y[#<_ypos>] (START AT TOP RIGHT QUADRANT FOR CENTER ORIGIN)
    o102 ELSE
        X0 Y0                   (RAMP POSITION FOR BOTTOM LEFT ORIGIN)
    o102 ENDIF

    ; RAMP STARTING HEIGHT
    G1 Z#<_curr_depth> F#<_ramp_feed>   

    ; DISTANCE DOWN WE NEED TO GO
    #<_dist> = [#<_depth> - #<_curr_depth>]

    M0 (DEBUG,  DIST=#<_dist> _curr_depth=#<_curr_depth> DEPTH=#<_depth>)
    o103 IF [#<_useMM> EQ 1]
        #<_ramp_depth> = -2.2  (5 DEGREE RAMP OVER 25MM - NEGATIVE FOR DOWNWARD)
    o103 ELSE
        #<_ramp_depth> = -.087 (5 DEGREE RAMP OVER 1 INCH - NEGATIVE FOR DOWNWARD)
    o103 ENDIF
    
    ; ENSURE RAMP DEPTH IS NOT ZERO TO AVOID DIVISION BY ZERO
    o104 IF [#<_ramp_depth> EQ 0]
        (M0 (DEBUG, RAMP DEPTH IS ZERO)
        #<_ramp_depth> = -0.001 (SET TO A SMALL NEGATIVE VALUE)
    o104 ENDIF
    
    #<_ramps> = [FIX[ABS[#<_dist>] / ABS[#<_ramp_depth>]]]

    o105 IF [#<_ramps> EQ 0]
        (M0 (DEBUG,  RAMPS IS ZERO)
        #<_ramps> = 1 (ENSURE AT LEAST ONE RAMP)
    o105 ENDIF
    
    ; IF RAMP DEPTH IS LARGER THAN OUR TARGET DISTANCE, USE THE TARGET DISTANCE
    o106 IF [ABS[#<_ramp_depth>] GT ABS[#<_dist>]]
        (M0 (DEBUG, RAMP DEPTH IS LARGER THAN TARGET DISTANCE)
        #<_ramp_depth> = #<_dist>
    o106 ENDIF
    
    (M0 (DEBUG,  DIST=#<_dist> RAMP_DEPTH=#<_ramp_depth> RAMPS=#<_ramps>)
    o107 REPEAT [#<_ramps>]
        (M0 (DEBUG,  BEFORE ADJUSTMENT: _curr_depth=#<_curr_depth> DEPTH=#<_depth> RAMP_DEPTH=#<_ramp_depth>)
        #<_curr_depth> = [#<_curr_depth> + #<_ramp_depth>]  (MOVE DOWN BY RAMP DEPTH)
        (M0 (DEBUG,  AFTER ADJUSTMENT: _curr_depth=#<_curr_depth> DEPTH=#<_depth> RAMP_DEPTH=#<_ramp_depth>)
        o108 IF [#<_center> EQ 1]
            G1 X[#<_xpos>] Y[#<_ypos>] F#<_feedrate>        (RAMP START POSITION)    
            X[#<_xpos> + 1] Z#<_curr_depth> F#<_ramp_feed>  (RAMP) 
            #<_xpos> = [#<_xpos> + 1]
        o108 ELSE
            G1 X0 Y0 F#<_feedrate>                          (RAMP START POSITION)    
            X1 Z#<_curr_depth> F#<_ramp_feed>               (RAMP)
            #<_xpos> = 1
        o108 ENDIF
        (M0 (DEBUG,  AFTER MOVEMENT: _xpos=#<_xpos> _ypos=#<_ypos> _curr_depth=#<_curr_depth>)
    o107 ENDREPEAT

    ; IF CURRENT DEPTH IS NOT YET TO PASS DEPTH
    (M0 (DEBUG, O109 _curr_depth=#<_curr_depth> _depth=#<_depth>)
    o109 IF [#<_curr_depth> GT #<_depth>]
        (M0 (DEBUG, O109 _curr_depth=#<_curr_depth> _depth=#<_depth>)
        o110 IF [#<_center> EQ 1]
            G1 X[#<_xpos>] Y[#<_ypos>] F#<_feedrate>    (MOVE TO START POSITION)
            X[#<_xpos> + 1] Z#<_depth> F#<_ramp_feed>            (FINAL RAMP TO DEPTH)
            #<_xpos> = [#<_xpos> + 1]
        o110 ELSE
            G1 X0 Y0 F#<_feedrate>                          (RAMP POSITION)
            X1 Z#<_depth> F#<_ramp_feed>                    (FINAL RAMP TO DEPTH)
            #<_xpos> = 1
        o110 ENDIF
    o109 ENDIF 

    #<_curr_depth> = #<_depth> 
    F#<_feedrate>                (FEEDRATE 100% TO MILL PASS)
o100 endsub

; CALL SUB TO DO RAMPS
o100 call

; MILLING LOGIC BASED ON CENTER ORIGIN OR BOTTOM-LEFT ORIGIN
; CHECK IF USING CENTER ORIGIN
M0 (DEBUG, START MILLING LOGIC _curr_depth=#<_curr_depth> TO _depth=#<_depth>)
o201 IF [#<_center> EQ 1]
    ; SET DEPTH LOOP
    o202 WHILE [#<_curr_depth> GT #<_final_depth>]
        M0 (DEBUG, SPIRAL MILLING AT DEPTH=#<_curr_depth>)
        ; SPIRAL MILLING LOGIC
        o203 WHILE [#<_curr_depth> GT #<_final_depth>]
            ; SPIRAL LOGIC TO MOVE IN A CLOCKWISE PATTERN
            X[#<_xpos>] Y[#<_ypos>] (MOVE TO NEXT POSITION IN SPIRAL)
            #<_xpos> = [#<_xpos> - #<_stepover> * COS[45]]
            #<_ypos> = [#<_ypos> - #<_stepover> * SIN[45]]
            ; CHECK IF SPIRAL HAS REACHED THE CENTER
            o204 IF [ABS[#<_xpos>] LT #<_stepover> AND ABS[#<_ypos>] LT #<_stepover>]
                M0 (DEBUG, SPIRAL HAS REACHED THE CENTER)
                #<_xpos> = 0
                #<_ypos> = 0
            o204 ENDIF
        o203 ENDWHILE
       #<_curr_depth> = [#<_curr_depth> + #<_ramp_depth>] ; MOVE DOWN BY RAMP DEPTH
    o202 ENDWHILE
o201 ELSE
    ; BOTTOM-LEFT ORIGIN MILLING LOGIC
    o204 WHILE [#<_curr_depth> GT #<_final_depth>]
        ; LOOP FOR EACH DEPTH
        o205 WHILE [#<_curr_depth> GT #<_final_depth>]
            ; SWEEP ACROSS X MOVING Y UP ON EACH PASS
            G1 X[#<_x_width>] F#<_feedrate> (MOVE ACROSS X)
            ; MOVE Y UP FOR THE NEXT PASS
            G1 Y[#<_ypos> + #<_stepover>] F#<_feedrate>
            ; MOVE BACK TO X0
            G1 X0 F#<_feedrate>
        o205 ENDWHILE
        #<_curr_depth> = [#<_curr_depth> + #<_ramp_depth>] ; MOVE DOWN BY RAMP DEPTH
        M0 (DEBUG, AFTER ADJUSTMENT: _curr_depth=#<_curr_depth>)
    o204 ENDWHILE
o201 ENDIF

; SET CURRENT DEPTH AS NEW Z0 SO SCRIPT CAN BE REPEATED
G92 Z0
; SAFETY HEIGHT
o307 IF [#<_useMM> EQ 1]
    G1 Z6.25   
o307 ELSE
    G1 Z.125   
o307 ENDIF
; USE COORDINATE SYSTEM 1
G54 G0 Z1
M30
% 
