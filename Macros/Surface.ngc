%
o1 (SURFACE RECTANGE - ORIGIN IS CENTER OR BOTTOM LEFT)
; CONFIG SECTION
; USE CENTER ORIGIN? 1=YES 0=NO
#<_center> = 1 
; USE METRIC=1 INCHES=0  
(YOU ARE RESPONSIBLE TO INSURE ALL VALUES ARE IN CORRECT UNITS)
#<_units> = 0  
; WIDTH ON X
#<_x_width> = 4.0    (9.25 INCHES = ~235MM)
; LENGTH ON Y
#<_y_length> = 4.0   (7.75 INCHES = ~197MM)
; TOOL DIAMETER
#<_tool_diameter> = 1  (1.375 INCHES = ~35MM)
; DEPTH TO GO DOWN IN ONE PASS USE NEGATIVE
#<_pass_depth> = -0.001  (0.002 INCHES PER PASS)
#<_final_depth> = -0.003 (0.002 INCHES FINAL DEPTH)
; STEPOVER PERCENTAGE 75-80% RECOMMENDED
#<_stepover_percent> = 50
; CALCULATE STEPOVER FROM TOOL DIAMETER AND PERCENTAGE
#<_stepover> = [#<_tool_diameter> * #<_stepover_percent> / 100]
; FEEDRATE
#<_feedrate> = 50    (INCHES PER MINUTE)
; RAMP ANGLE
#<_ramp_angle> = 5 (5 DEGREE RAMP ANGLE)
; RAMP LENGTH (Distance over which to ramp in the X-Axis)
#<_ramp_length> = 1 (1 INCH RAMP LENGTH OR 25MM IF USING MM)
; SAFE_HEIGHT
#<_safe_height> = 1
; SHOW PROGRESS MESSAGES 1=YES 0=NO
#<_progress> = 0  
; END OF CONFIG SECTION

; DISPLAY ALL THE PARAMETERS
M0 (DEBUG, "Center Origin: [#<_center>] Units: [#<_units>] X Width: [#<_x_width>] Y Length: [#<_y_length>] Tool Diameter: [#<_tool_diameter>] Pass Depth: [#<_pass_depth>] Final Depth: [#<_final_depth>] Steppover Percent: [#<_stepover_percent>] Steppover: [#<_stepover>] Feedrate: [#<_feedrate>] Ramp Angle: [#<_ramp_angle>] Ramp Length: [#<_ramp_length>]")

; SUBROUTINES
o120 SUB (move_to_safe_z)
    G0 Z#<_safe_height>                            
    o121 IF [#<_progress> EQ 1]
        (DEBUG, At safety height)
    o121 ENDIF
o120 endsub

o100 SUB (ramp_to_depth)
    o122 IF [#<_progress> EQ 1]
        (DEBUG, === START RAMP SUBROUTINE ===)
    o122 ENDIF

    ; Move to safety height
    o120 call
    
    ; Move down to current depth (where we are in the stock)
    G1 Z#<_curr_depth> F#<_ramp_feed>
    o123 IF [#<_progress> EQ 1]
        (DEBUG, At stock top depth=#<_curr_depth>)
    o123 ENDIF

    ; Ramp down to the target depth moving in positive X
    G1 X[#<_xpos> + #<_ramp_length>] Z#<_depth> F#<_ramp_feed>
    o124 IF [#<_progress> EQ 1]
        (DEBUG, Ramped to X=[#<_xpos> + #<_ramp_length>] depth=#<_depth>)
    o124 ENDIF

    ; Return to start X position
    G1 X#<_xpos> F#<_feedrate>
    o125 IF [#<_progress> EQ 1]
        (DEBUG, Returned to start position)
    o125 ENDIF

    ; Update current depth to reflect where we are now
    #<_curr_depth> = #<_depth>
    o126 IF [#<_progress> EQ 1]
        (DEBUG, Updated current depth to #<_curr_depth>)
    o126 ENDIF
o100 endsub

o110 SUB (sweep_pass)
    o127 IF [#<_progress> EQ 1]
        (DEBUG, === START SWEEP SUBROUTINE ===)
    o127 ENDIF
    #<_ypos> = 0  ; Reset Y position for each depth
    o128 IF [#<_progress> EQ 1]
        (DEBUG, Y Position Reset #<_ypos>)
    o128 ENDIF
    #<_direction> = 1; SET INITIAL DIRECTION TO RIGHT
    o129 IF [#<_progress> EQ 1]
        (DEBUG, Set Direction #<_direction>)
    o129 ENDIF

    o111 WHILE [#<_ypos> LT #<_y_length>]  ; Loop until Y length is reached       
    o130 IF [#<_progress> EQ 1]
        (DEBUG,  Inside Y Loop Y Pos is #<_ypos>)
    o130 ENDIF
        ; SWEEP ACROSS X MOVING Y UP ON EACH PASS
        o112 IF [#<_direction> EQ 1]
            G1 X[#<_x_width>] F#<_feedrate> (MOVE ACROSS X RIGHT)
            o131 IF [#<_progress> EQ 1]
                (DEBUG, Sweep Right X is now #<_x_width>)
            o131 ENDIF
            #<_direction> = 0; SET DIRECTION TO LEFT
            o132 IF [#<_progress> EQ 1]
                (DEBUG, Set direction to Left #<_direction>)
            o132 ENDIF
        o112 ELSE
            G1 X0 F#<_feedrate> (MOVE BACK TO X0 LEFT)
            o133 IF [#<_progress> EQ 1]
                (DEBUG, Sweep Left X is now 0)
            o133 ENDIF
            #<_direction> = 1; SET DIRECTION TO RIGHT
            o134 IF [#<_progress> EQ 1]
                (DEBUG, Set direction to Right #<_direction>)
            o134 ENDIF
        o112 ENDIF
        
        #<_ypos> = [#<_ypos> + #<_stepover>] ; Update Y position after increment
        o135 IF [#<_progress> EQ 1]
            (DEBUG, Y Position Increased by Stepover to #<_ypos>)
        o135 ENDIF
        G1 Y[#<_ypos>] F#<_feedrate>
        o136 IF [#<_progress> EQ 1]
            (DEBUG, Move to Y Pos #<_ypos>)
        o136 ENDIF
    o111 ENDWHILE
    ; SWEEP TO THE END OF Y AXIS IF WE DIDNT GO THAT FAR
    o137 IF [#<_progress> EQ 1]
        (DEBUG, Exit Y Loop )
    o137 ENDIF
    o113 IF [#<_direction> EQ 0]
        G1 X0 F#<_feedrate>
        o138 IF [#<_progress> EQ 1]
            (DEBUG, End Y Loop, Sweep Left)
        o138 ENDIF
    o113 ELSE
        G1 X[#<_x_width>] F#<_feedrate>
        o139 IF [#<_progress> EQ 1]
            (DEBUG, End Y Loop, Sweep Right )
        o139 ENDIF
    o113 ENDIF
    o140 IF [#<_progress> EQ 1]
        (DEBUG, === END SWEEP SUBROUTINE ===)
    o140 ENDIF
o110 endsub

o160 SUB (surface_center)
    o141 IF [#<_progress> EQ 1]
        (DEBUG, Using CENTER origin spiral pattern)
    o141 ENDIF
            
    o204 WHILE [#<_curr_depth> GT #<_final_depth>]  ; Loop until final depth is reached
        ; Calculate next depth
        #<_depth> = [#<_curr_depth> + #<_pass_depth>]  ; Next depth to cut to
        
        ; Don't go deeper than final depth
        o208 IF [#<_depth> LT #<_final_depth>]
            #<_depth> = #<_final_depth>
        o208 ENDIF
        
        o142 IF [#<_progress> EQ 1]
            (DEBUG, Moving to depth #<_depth>)
        o142 ENDIF
        
        ; Start at bottom-left corner
        #<_xpos> = [-#<_x_width> / 2]
        #<_ypos> = [-#<_y_length> / 2]
        
        ; Move to start position at safe height
        o120 call
        G0 X#<_xpos> Y#<_ypos>
        o143 IF [#<_progress> EQ 1]
            (DEBUG, Moved to #<_xpos>, #<_ypos>)
        o143 ENDIF

        ; Ramp down at start position
        o100 call ; Ramp to the next depth
        o144 IF [#<_progress> EQ 1]
            (DEBUG, Ramped down at #<_xpos>, #<_ypos>)
        o144 ENDIF
        
        ; Initialize perimeter size
        #<_current_width> = #<_x_width>
        #<_current_length> = #<_y_length>
        
        ; Spiral in until we reach center
        o211 WHILE [[#<_current_width> GT #<_stepover>] AND [#<_current_length> GT #<_stepover>]]
            ; Move right along bottom
            #<_xpos> = [#<_xpos> + #<_current_width>]
            G1 X#<_xpos> F#<_feedrate>
            o145 IF [#<_progress> EQ 1]
                (DEBUG, Move right along bottom to #<_xpos>)
            o145 ENDIF
            
            ; Move up along right side
            #<_ypos> = [#<_ypos> + #<_current_length>]
            G1 Y#<_ypos> F#<_feedrate>
            o146 IF [#<_progress> EQ 1]
                (DEBUG, Move up along right side to #<_ypos>)
            o146 ENDIF

            ; Move left along top
            #<_xpos> = [#<_xpos> - #<_current_width>]
            G1 X#<_xpos> F#<_feedrate>
            o147 IF [#<_progress> EQ 1]
                (DEBUG, Move left along top to #<_xpos>)
            o147 ENDIF

            ; Move down along left side
            #<_ypos> = [#<_ypos> - #<_current_length>]
            G1 Y#<_ypos> F#<_feedrate>
            o148 IF [#<_progress> EQ 1]
                (DEBUG, Move down left to #<_ypos>)
            o148 ENDIF
            
            ; Step inward by stepover
            #<_xpos> = [#<_xpos> + #<_stepover>]
            #<_ypos> = [#<_ypos> + #<_stepover>]
            G1 X#<_xpos> Y#<_ypos> F#<_feedrate>
            o149 IF [#<_progress> EQ 1]
                (DEBUG, Moved inward to #<_xpos>, #<_ypos>)
            o149 ENDIF

            ; Reduce perimeter size by two stepovers (one for each side)
            #<_current_width> = [#<_current_width> - [2 * #<_stepover>]]
            #<_current_length> = [#<_current_length> - [2 * #<_stepover>]]
            o150 IF [#<_progress> EQ 1]
                (DEBUG, perimeter size _current_width = #<_current_width> _current_length = #<_current_length>)
            o150 ENDIF
        o211 ENDWHILE
        
        ; Move to safe height for next pass
        o120 call 
        #<_progress> = 0 ; only show the first time       
    o204 ENDWHILE
    o151 IF [#<_progress> EQ 1]
        (DEBUG, Finished spiral pattern, Current Depth is #<_curr_depth> Final Depth is #<_final_depth>)
    o151 ENDIF
o160 endsub (surface_center)

o170 SUB (surface_BL)
    o152 IF [#<_progress> EQ 1]
        (DEBUG, Using BOTTOM-LEFT origin milling pattern #<_xpos>: [#<_xpos>], #<_ypos>: [#<_ypos>])
    o152 ENDIF
    ; BOTTOM-LEFT ORIGIN MILLING LOGIC
    o153 IF [#<_progress> EQ 1]
        (DEBUG, START MAIN MILLING LOOP, Current Depth is #<_curr_depth> Final Depth is #<_final_depth>)
    o153 ENDIF
    
    o204 WHILE [#<_curr_depth> GT #<_final_depth>]  ; Loop until final depth is reached
        ; Calculate next depth
        #<_depth> = [#<_curr_depth> + #<_pass_depth>]  ; Next depth to cut to
        
        ; Don't go deeper than final depth
        o208 IF [#<_depth> LT #<_final_depth>]
            #<_depth> = #<_final_depth>
        o208 ENDIF
        
        o154 IF [#<_progress> EQ 1]
            (DEBUG, Moving to depth #<_depth>)
        o154 ENDIF
        o100 call ; Ramp to the next depth
        o110 call ; Do the sweep pass
        #<_progress> = 0 ; only show the first time
    o204 ENDWHILE
    o155 IF [#<_progress> EQ 1]
        (DEBUG, Finished Main WHILE LOOP, Current Depth is #<_curr_depth> Final Depth is #<_final_depth>)
    o155 ENDIF
o170 endsub (surface_BL)

; MACHINE SETUP
G54
G0 G90 G17
o303 IF [#<_units> EQ 1]
    G21          (SET UNITS TO MILLIMETERS)
o303 ELSE
    G20          (SET UNITS TO INCHES)
o303 ENDIF

; SAFETY CHECKS
o400 IF [#<_final_depth> GT #<_pass_depth>]
    M0 (DEBUG, ERROR: FINAL DEPTH MUST NOT BE HIGHER THAN PASS DEPTH - ABORTING)
    M2
o400 ENDIF 

o401 IF [#<_stepover> GT [#<_tool_diameter> * 0.8]]
    M0 (DEBUG, ERROR: Stepover [#<_stepover>] exceeds 80% of tool diameter [#<_tool_diameter>])
    M2
o401 ENDIF

; POSITION CONTROL
o200 IF [#<_center> GT 0]
    #<_xpos> = [#<_x_width> / 2]   (ORIGIN IS CENTER SO SET X TO HALF WIDTH)
    #<_ypos> = [#<_y_length> / 2]  (ORIGIN IS CENTER SO SET Y TO HALF LENGTH)
o200 ELSE
    #<_xpos> = 0                   (START FROM BOTTOM LEFT)
    #<_ypos> = 0
o200 ENDIF

; INITIALIZE VARIABLES
#<_curr_depth> = 0            (START AT Z0 - TOP OF STOCK)
#<_ramp_feed> = [#<_feedrate> / 2]  (REDUCE FEEDRATE BY 50% FOR RAMP)
#<_depth> = 0                ; Initialize the depth here

; INITIAL POSITION
; Move to safe height to start
o120 call                    

; MILLING LOGIC BASED ON CENTER ORIGIN OR BOTTOM-LEFT ORIGIN
; CHECK IF USING CENTER ORIGIN
o201 IF [#<_center> EQ 1]
    o160 call ;surface_center
o201 ELSE
    o170 call ;surface_BL
o201 ENDIF

; Final safe height and cleanup
G92 Z0 (In csae you want to run again set Z=0 at current top of stock)
; Move to safe height to start
o120 call
G0 X0 Y0
M30
%